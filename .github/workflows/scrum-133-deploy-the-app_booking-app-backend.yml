# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - booking-app-backend

on:
  push:
    branches:
      - SCRUM-133-deploy-the-app
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x" # Update to Node.js 20.x to meet NestJS requirements
          cache: "npm"
          cache-dependency-path: "backend/package-lock.json"

      # Install dependencies without skipping dev dependencies needed for build
      - name: Install dependencies
        run: |
          cd backend
          npm ci

      # Build with properly installed NestJS CLI
      - name: Build application
        run: |
          cd backend
          npx nest build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      # Create slim deployment package by excluding unnecessary files
      - name: Create slim deployment package
        run: |
          cd backend
          # Install pm2 for production process management
          npm install pm2 --save
          # Clean up development dependencies and files
          npm prune --production
          # Remove development files
          rm -rf .git .github .vscode tests test .eslintrc* tsconfig.json tsconfig.build.json
          # Create a tarball for deployment (important step that was missing!)
          cd ..
          tar -czf release.tgz -C backend .
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.tgz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unpack artifact efficiently
        run: mkdir -p app && tar -xzf release.tgz -C app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_9F8DBAB572D14E1685EE75B41915FCD2 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BAD9EECA19F943F18A65D60C0C3448AF }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_7BC8E4BEADA04C2EA793E85FD9389394 }}

      # First, configure Azure app settings instead of using startup command for env variables
      - name: Configure Azure App Service settings
        uses: azure/appservice-settings@v1
        with:
          app-name: "booking-app-backend"
          app-settings-json: |
            [
              {
                "name": "SUPABASE_URL", 
                "value": "${{ secrets.SUPABASE_URL }}",
                "slotSetting": false
              },
              {
                "name": "SUPABASE_SERVICE_ROLE_KEY",
                "value": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
                "slotSetting": false
              },
              {
                "name": "SUPABASE_ANON_KEY",
                "value": "${{ secrets.SUPABASE_ANON_KEY }}",
                "slotSetting": false
              },
              {
                "name": "ALLOWED_ORIGINS",
                "value": "https://agreeable-grass-049dc8010.4.azurestaticapps.net,https://agreeable-grass-049dc8010.6.azurestaticapps.net,http://localhost:5180",
                "slotSetting": false
              },
              {
                "name": "NODE_OPTIONS",
                "value": "--max-old-space-size=4096",
                "slotSetting": false
              },
              {
                "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                "value": "600",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION", 
                "value": "~20",
                "slotSetting": false
              }
            ]
        id: settings

      # Then use simplified startup command
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "booking-app-backend"
          slot-name: "Production"
          package: app/
          startup-command: "pm2 start dist/main.js --no-daemon"

      - name: Configure App Insights
        uses: azure/appservice-settings@v1
        with:
          app-name: "booking-app-backend"
          app-settings-json: |
            [
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}",
                "slotSetting": false
              },
              {
                "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                "value": "~3",
                "slotSetting": false
              }
            ]
      - name: Restart App Service
        run: az webapp restart --name booking-app-backend --resource-group testGroup
      - name: Validate Azure configuration
        run: |
          cd backend
          if [ ! -f "web.config" ]; then
            echo "Warning: web.config not found, creating default file"
            # Create a default web.config file for Azure
            echo '<?xml version="1.0" encoding="utf-8"?>
            <configuration>
              <system.webServer>
                <webSocket enabled="false" />
                <handlers>
                  <add name="iisnode" path="dist/main.js" verb="*" modules="iisnode" />
                </handlers>
                <rewrite>
                  <rules>
                    <rule name="DynamicContent">
                      <match url="/*" />
                      <action type="Rewrite" url="dist/main.js" />
                    </rule>
                  </rules>
                </rewrite>
                <security>
                  <requestFiltering>
                    <hiddenSegments>
                      <remove segment="bin" />
                    </hiddenSegments>
                  </requestFiltering>
                </security>
                <httpErrors existingResponse="PassThrough" />
                <iisnode nodeProcessCommandLine="node.exe --max-old-space-size=4096" watchedFiles="web.config;*.js" />
              </system.webServer>
            </configuration>' > web.config
          fi
      - name: Add app warmup script
        run: |
          cd backend
          # Create warmup script
          echo '// warmup.js - Ensures Azure App Service is properly warmed up
          const https = require("https");
          const http = require("http");

          // Make a request to our own health endpoint
          const options = {
            hostname: process.env.WEBSITE_HOSTNAME || "localhost",
            port: process.env.PORT || 8080,
            path: "/health",
            method: "GET"
          };

          const protocol = options.port === 443 ? https : http;
          const req = protocol.request(options, (res) => {
            console.log(`Warmup status: ${res.statusCode}`);
            let data = "";
            res.on("data", (chunk) => { data += chunk; });
            res.on("end", () => {
              console.log("App warmup complete");
              console.log(data);
            });
          });

          req.on("error", (e) => {
            console.error(`Warmup error: ${e.message}`);
          });

          req.end();' > dist/warmup.js
